generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Aluno {
  nome              String
  senha             String    @db.VarChar
  estado            String    @default("ativo")
  email             String
  id                Int       @id @default(autoincrement())
  codigoConfirmacao String    @unique
  status            Boolean?
  reservas          Reserva[]

  @@unique([email, status])
  @@map("aluno")
}

model Reserva {
  id_turma   Int
  id_aluno   Int
  computador String
  curso      String
  id_reserva Int    @id @default(autoincrement())
  aluno      Aluno  @relation(fields: [id_aluno], references: [id])
  turma     Turma @relation(fields: [id_turma], references: [id])
  @@unique([id_aluno, id_turma])
  @@map("reserva")
}

model Professor {
  nome              String
  senha             String   @db.VarChar
  estado            String   @default("ativo")
  email             String
  id                Int      @id @default(autoincrement())
  codigoConfirmacao String   @unique
  status            Boolean?
  turmas            Turma[]

  @@unique([email, status])
  @@map("professor")
}

model Laboratorio {
  id_lab                  Int                 @id @unique @default(autoincrement())
  quantidade_computadores Int
  bloqueia                Bloqueia[]
  proibe                  ProibeLaboratorio[]

  @@map("laboratorio")
}

model Bloqueia {
  email_professor      String      @db.VarChar(20)
  id_lab               Int
  horario_inicio       DateTime?   @db.Time(0)
  horario_fim          DateTime?   @db.Time(0)
  data_inicio_bloqueia DateTime
  data_fim_bloqueia    DateTime
  dia_semana           String      @db.VarChar(20)
  id                   Int         @unique @default(autoincrement())
  laboratorio          Laboratorio @relation(fields: [id_lab], references: [id_lab])

  @@map("bloqueia")
}

model Turma {
  id_lab         Int
  data_turma     String
  curso          String
  horario_inicio String
  horario_fim    String
  id_professor   Int
  id             Int       @id @default(autoincrement())
  reservas       Reserva[]
  professor      Professor @relation(fields: [id_professor], references: [id])

  @@map("turma")
}

model Administrador {
  nome  String
  senha String @db.VarChar
  email String @unique
  id    Int    @id @default(autoincrement())

  @@map("administrador")
}

model ProibeLaboratorio {
  data_inicio DateTime?
  data_fim    DateTime?
  id_lab      Int
  id          Int         @unique @default(autoincrement())
  laboratorio Laboratorio @relation(fields: [id_lab], references: [id_lab])

  @@map("proibelaboratorio")
}
